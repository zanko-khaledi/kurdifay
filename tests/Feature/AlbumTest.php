<?php

namespace Tests\Feature;

use App\Models\Album;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\Testing\File;
use Illuminate\Support\Str;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class AlbumTest extends TestCase
{

    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Sanctum::actingAs(User::factory()->create());

        Album::factory()->count(10)->create();

    }


    /**
     * @test
     */
    public function create_album_test()
    {
         $resposne = $this->post(route("albums.store"),[
             "name" => "zanko",
             "desc" => Str::random(),
             "slug" => "zanko",
             "img" => File::fake()->create("zanko.avatar.jpg")->size(100),
         ])->assertCreated()->assertJson([
             "created" => true
         ]);

         $this->assertDatabaseHas("albums",[
             "name" => $resposne["album"]["name"]
         ]);
    }


    /**
     * @test
     */
    public function get_all_albums_test()
    {

        $this->get(route("albums.index"))
            ->assertOk()->json();

        $this->assertGreaterThan(0,count(Album::all()));

        $this->assertDatabaseCount("albums",Album::all()->count());
    }

    /**
     * @test
     */
    public function get_single_album_test()
    {


        $this->get(route("albums.show",[
            "album" => Album::all()->first()->id
        ]))->assertOk()->assertJson([
            "name" => Album::all()->first()->name
        ])->json();

    }


    /**
     * @test
     */
    public function  update_albums_test()
    {

        $response = $this->patch(route("albums.update",[
            "album" => Album::all()->last()->id
        ]),[
            "name" => "Teddy"
        ])->assertOk()->assertJson([
            "updated" => true,
        ])->json();

        $this->assertDatabaseHas("albums",[
            "name" => $response["album"]["name"]
        ]);

    }

    /**
     * @test
     */
    public function delete_album_test()
    {

        $response = $this->delete(route("albums.destroy",[
            "album" => Album::all()->last()->id
        ]))->assertOk()->assertJson([
            "deleted" => true
        ])->json();

        $this->assertDatabaseMissing("albums",[
            "name" => $response["album"]["name"]
        ]);

        $this->assertDatabaseCount("albums",Album::all()->count());
    }

}
