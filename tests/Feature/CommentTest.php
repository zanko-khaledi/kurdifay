<?php

namespace Tests\Feature;

use App\Enums\CommentType;
use App\Models\Comment;
use App\Models\Post;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class CommentTest extends TestCase
{

    use RefreshDatabase;


    private $post;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Post::factory()->count(20)->create();

        Comment::factory()->count(5)->create([
            "post_id" => Post::all()->first()->id
        ]);

        Comment::factory()->count(2)->create([
            "post_id" => (int)(Post::all()->last()->id - 2)
        ]);
    }


    /**
     * @test
     */
    public function create_comment_test()
    {
        $this->withoutExceptionHandling();

        $this->post(route("comments.store"),[
            "post_id" => (int)(Post::all()->last()->id - 5),
            "name" => "Zanko",
            "email" => "zanko@gmail.com",
            "comment" => "Hello Teddy",
            "entity" => "comment"
        ])->assertCreated()->assertJson([
            "created" => true
        ]);

        $this->assertDatabaseHas("comments",[
            "comment" => "Hello Teddy"
        ]);
    }

    /**
     * @test
     */
    public function create_comment_reply_test()
    {
        $this->withoutExceptionHandling();

        $this->post(route("comments.store"),[
            "entity" => "replay",
            "post_id" => (int)(Post::all()->last()->id - 5),
            "name" => "Milad",
            "email" => "Milad@gmail.com",
            "comment" => "Hi Zanko",
            "comment_id" => Comment::all()->first()->id
        ])->assertCreated()->assertJson([
            "created" => true
        ])->json();

        $this->assertDatabaseHas("replies",[
            "email" => "Milad@gmail.com",
            "comment" => "Hi Zanko"
        ]);
    }

    /**
     * @test
     */
    public function update_comment_status_test()
    {
        $this->withoutExceptionHandling();

        Sanctum::actingAs(User::factory()->create(),["admin:*"]);

        $response = $this->patch(route("comments.update",[
            "comment" => Comment::all()->first()->id
        ]),[
            "status" => 1,
            "entity" => CommentType::COMMENT->getType()
        ])->assertOk()->assertJson([
            "updated" => true
        ])->json();

        $this->assertEquals(1,(int)$response["comment"]["status"]);
    }

    /**
     * @test
     */
    public function delete_comment_test()
    {

        Sanctum::actingAs(User::factory()->create(),["admin:*"]);

       $comment =   Comment::all()->first()->id;

       $this->delete(route("comments.destroy",[
           "comment" => $comment
       ]))->assertOk()->assertJson([
           "deleted" => true
       ])->json();


       $this->assertDatabaseMissing("comments",[
           "id" => $comment
       ]);
    }

}
