<?php

namespace Tests\Feature;

use App\Models\Category;
use App\Models\Comment;
use App\Models\Post;
use App\Models\Subcategory;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class CommentTest extends TestCase
{

    use RefreshDatabase;


    private $post;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $category = Category::factory()->create();
        $subcategory = Subcategory::factory()->count(5)->create([
            "category_id" => $category->id
        ]);

        $this->post = Post::factory()->count(10)->create([
            "subcategory_id" => $subcategory[3]->id
        ]);

        Comment::factory()->count(10)->create([
            "post_id" => $this->post[0]->id
        ]);
    }


    /**
     * @test
     */
    public function create_comment_test()
    {
        $this->withoutExceptionHandling();

        $this->post(route("comments.store"),[
            "post_id" => $this->post[0]->id,
            "name" => "Zanko",
            "email" => "zanko@gmail.com",
            "comment" => "Hello Teddy",
            "entity" => "comment"
        ])->assertCreated()->assertJson([
            "created" => true
        ]);

        $this->assertDatabaseHas("comments",[
            "comment" => "Hello Teddy"
        ]);
    }

    /**
     * @test
     */
    public function create_comment_reply_test()
    {
        $this->withoutExceptionHandling();

        $this->post(route("comments.store"),[
            "entity" => "replay",
            "post_id" => $this->post[0]->id,
            "name" => "Milad",
            "email" => "Milad@gmail.com",
            "comment" => "Hi Zanko",
            "comment_id" => Comment::all()->first()->id
        ])->assertCreated()->assertJson([
            "created" => true
        ])->json();

        $this->assertDatabaseHas("replies",[
            "email" => "Milad@gmail.com",
            "comment" => "Hi Zanko"
        ]);
    }

    /**
     * @test
     */
    public function update_comment_status_test()
    {
        $this->withoutExceptionHandling();

        Sanctum::actingAs(User::factory()->create(),["admin:*"]);

        $response = $this->patch(route("comments.update",[
            "comment" => Comment::all()->first()->id
        ]),[
            "status" => 1
        ])->assertOk()->assertJson([
            "updated" => true
        ])->json();


        $this->assertDatabaseHas("comments",[
            "status" => $response["comment"]["status"]
        ]);

        $this->assertEquals(Comment::all()->first()->status,$response["comment"]["status"]);
    }
}
