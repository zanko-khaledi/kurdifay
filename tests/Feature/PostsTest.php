<?php

namespace Tests\Feature;

use App\Enums\Entities;
use App\Models\Category;
use App\Models\Post;
use App\Models\Song;
use App\Models\Subcategory;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\Testing\File;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use Illuminate\Testing\Fluent\AssertableJson;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class PostsTest extends TestCase
{

    use RefreshDatabase;

    private mixed $category;

    private mixed $subcategory;

    private mixed $post;

    private mixed $song;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Sanctum::actingAs(User::factory()->create());



        $this->category = Category::factory()->create();

        $this->subcategory = Subcategory::factory()->count(3)->create([
            "category_id" => $this->category->id
        ]);

        $image = File::fake()->create("avatar.jpg")
            ->move(public_path("/files"),"avatar_".Str::random().".jpg");

        $song_file  = File::fake()->create("song.mp3")
            ->move(public_path("/songs"),"avatar_".Str::random().".mp3");

        $this->post= Post::factory()->count(3)->create([
            "subcategory_id" => $this->subcategory[0]->id,
            "img" => $image
        ]);

        $this->song = Song::factory()->count(3)->create([
            "post_id" => $this->post[0]->id,
            "src" => $song_file
        ]);


    }

    /**
     * @test
     */
    public function get_all_posts_test()
    {



        $response = $this->get(route("posts.index"))
            ->assertOk()->json();


        $this->assertGreaterThan(2,count($response));


        $this->assertDatabaseHas("posts",[
            "title" => $response["data"][0]["title"]
        ]);
    }

    /**
     * @test
     */
    public function get_all_posts_with_querystring_request_test()
    {
        $response = $this->get(route("posts.index",[
            "sort=desc&title=M"
        ]))->assertOk()->json();

        $this->assertGreaterThanOrEqual(0,count($response));
    }

    /**
     * @test
     */
    public function get_single_post_test()
    {

        $response = $this->get(route("posts.show",[
            "post" => $this->post[0]->id
        ]));

        $response->assertOk();

        $response->assertJson(fn(AssertableJson $json)=>
          $json->has("title")
            ->where("title",$response["title"])
            ->etc()
        );
    }


    /**
     * @test
     */
    public function create_post_test()
    {
        $this->withoutExceptionHandling();

        $this->postJson(route('posts.store'),[
            "subcategory_id" => $this->subcategory[0]->id,
            "title" => "php",
            "desc" => Str::random(),
            'entity' => Entities::SONG->getEntity(),
            "slug" => "php",
            'artist' => "php",
            "lyric" => Str::random(),
            "img" => UploadedFile::fake()->create("avatar.jpg"),
            "src" => UploadedFile::fake()->create("avatar.mp3")
        ])
            ->assertCreated()
            ->assertJson([
            "created" => true
        ])->json();

        $this->assertDatabaseHas("posts",[
            "title" => "php"
        ]);
    }

    /**
     * @test
     */
    public function update_post_test()
    {

        $this->withoutExceptionHandling();

        $response = $this->patch(route("posts.update",[
            "post" => $this->post[0]->id
        ]),[
            "title" => "Teddy",
            "desc" => Str::random(),
            "img" => UploadedFile::fake()->create("Teddy.jpg"),
            "src" => UploadedFile::fake()->create("Teddy.mp3")
        ])->assertOk()->assertJson([
            "updated" => true
        ])->json();


        $this->assertDatabaseHas("posts",[
            "title" => $response["post"]["title"],
            "img" => $response["post"]["img"]
        ]);
    }


    /**
     * @test
     */
    public function delete_post_test()
    {
        $this->withoutExceptionHandling();

        $this->delete(route("posts.destroy",[
            "post" => $this->post[0]->id
        ]))->assertOk()->assertJson([
            "deleted" => true
        ])->json();
    }

}
