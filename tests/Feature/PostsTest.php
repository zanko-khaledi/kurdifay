<?php

namespace Tests\Feature;

use App\Enums\Entities;
use App\Models\Album;
use App\Models\Artist;
use App\Models\Post;
use App\Models\Tag;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;

use Illuminate\Http\Testing\File;
use Illuminate\Support\Str;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class PostsTest extends TestCase
{

    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Sanctum::actingAs(User::factory()->create());

        Post::factory()->count(10)->create();

        Album::factory()->count(4)->create();

        Artist::factory()->count(4)->create();

        Tag::factory()->count(30)->create();
    }

    /**
     * @test
     */
    public function create_test()
    {

        $this->withoutExceptionHandling();


        $response = $this->post(route("posts.store"), [
            "title" => "Zanko",
            "desc" => Str::random(),
            "slug" => "zanko",
            "entity" => Entities::SONG->getEntity(),
            "lyric" => Str::random(),
            "artist" => "zanko",
            "img" => File::fake()->create("avatar.jpg")->size(30),
            "src" => File::fake()->create("avatar.mp3")->size(30),
            "tags" => [1, 2],
            "album" => Album::all()->first()->id,
            "artist_id" => Artist::all()->first()->id
        ])->assertCreated()->assertJson([
            "created" => true
        ]);

        $this->assertDatabaseHas("posts", [
            "title" => $response["post"]["title"]
        ]);
    }

    /**
     * @test
     */
    public function get_all_records_test()
    {
        $response = $this->get(route("posts.index"))
            ->assertOk()->json();

        $this->assertGreaterThan(0,count($response));
        
        $this->assertDatabaseCount("posts",count(Post::all()));
    }

    /**
     * @test
     */
    public function get_single_record()
    {

        $this->withExceptionHandling();

        $response = $this->get(route("posts.show",[
            "post" => Post::all()->first()->id
        ]))->assertOk()->json();

        $this->assertEquals(Post::all()->first()->title,$response["title"]);
    }

    /**
     * @test
     */
    public function update_records()
    {
        $this->withDeprecationHandling();

        $response = $this->patch(route("posts.update",[
            "post" => Post::all()->first()->id
        ]),[
            "title" => "Teddy",
            "slug" => "Teddy",
            "img" => File::fake()->create("teddy.jpg"),
            "album" => (int)(Album::all()->last()->id - 5)
        ])->assertOk()->assertJson([
            "updated" => true
        ])->json();

        
        $this->assertDatabaseHas("posts",[
            "title" => $response["post"]["title"],
            "img" => $response["post"]["img"]
        ]);
    }


    /**
     * @test
     */
    public function delete_record_test()
    {

        $id = Post::all()->last()->id;

        $this->delete(route("posts.destroy",[
            "post" => $id
        ]))->assertOk()->assertJson([
            "deleted" => true
        ])->json();

        $this->assertDatabaseMissing("posts",[
            "id" => $id
        ]);
    }
}
